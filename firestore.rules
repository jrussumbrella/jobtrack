rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
     match /users/{userId} {
      allow read, write: if isAuthenticated() &&  isOwner(userId);
    }

    match /jobApplications/{jobApplicationId} {
      allow read:  if isAuthenticated() &&  isUserOwner();
      allow create, update: if isAuthenticated() &&  isUserOwner() && isNow(incomingData().created_at) && isValidateJobApplication();
      allow delete: if isAuthenticated() &&  isUserOwner();
    }

    function isValidateJobApplication() {
      let isValidJobTitle = request.resource.data.job_title.size() > 6;
      let isValidCompany = request.resource.data.company.size() > 1;
      let isValidStatus = request.resource.data.status == 'interviewed' || request.resource.data.status == 'offered' || request.resource.data.status == 'denied' || request.resource.data.status == 'accepted';
      return isValidJobTitle && isValidCompany && isValidStatus;
    }

    function isUserOwner() {
      return getResourceData().user_id == request.auth.uid;
    }

    function getResourceData() {
        return resource == null ? request.resource.data : resource.data
    }

    function incomingData() {
    	return request.resource.data;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isNow(field) {
        return request.time == field;
    }
  }
}